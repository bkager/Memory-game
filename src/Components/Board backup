//Board should render a 6 x 6 grid of cards

//Board holds the state of which cards have been found, number of turns, etc.
//   Starts with array of images or card objects
//  Board renders 36 cards, held in an array
//  Gives each card a icon prop which the card uses to render an image
//    The icon prop is chosen randomly from an array
//    Randomize array at the beginning of each round
//  Gives each card an onClick function
//    The function changes the card from 'back' to 'front' to display the image
//    The handler function is in Board, which makes it easy to keep track of state in one place
//
//    The onClick also handles checking each pair of cards for a match
//      On a click, check to see if another card is also clicked
//        Check to see if they have the same image
//          If so, announce match
//            Check to see if all cards are matched: maybe have separate array just keeping track of flipped/not flipped? Or give each card a "flipped" attribute? Keep   count of flipped?
//          If not, so nothing until next click
//          Wait for third click before flipping unmatched cards back to blank and starting next round
//  Gives each card a "flipped" attribute?

import React, { useState } from "react";
import Card from "./Card";

//Unshuffled array of image data: this is static data and so stays outside of the function component
const unshuffledImages = [
  { icon: "/images/bird-of-paradise.png", alt: "Bird of Paradise" },
  { icon: "/images/coconut-drink.png", alt: "coconut drink" },
  { icon: "/images/crab.png", alt: "crab" },
  { icon: "/images/jellyfish.png", alt: "jellyfish" },
];

//shuffleImages takes the array of unshuffled images and adds two copies of each in random order to a new array,
function shuffleImages(array) {
  const unshuffled = [...array, ...array];
  let results = [];
  console.log("Unshuffled at start of function: ", unshuffled);

  while (unshuffled[0] !== undefined) {
    console.log("Unshuffled in while loop: ", [...unshuffled]);
    let i = Math.floor(Math.random() * unshuffled.length);
    results.push(unshuffled[i]);
    unshuffled.splice(i, 1);
  }
  return results;
}

//Invokes shuffleCards to create an array of shuffled image data that can be used to create cards

const shuffledImages = shuffleImages(unshuffledImages);

function Board() {
  //Function to shuffle array: state data; called once at beginning of round
  //  Create new array which contains each image object twice; shuffle objects randomly into new array which will be used to create Card components

  /*
  ClickHandler function should: 
    Keep a count of clicks; a turn involves 2-3 clicks on cards
      1) Turn over first card
      2) Turn over second card and check for match
      3) If no match, cards stay flipped face-up until the player clicks again

    Initialize click counter
    When a click event occurs, check the counter
    If counter = 1, 
      change image for clicked card
      store key of clicked card in array
      increment click counter
    If counter = 2, 
      change image for clicked card
      add key of clicked card in array
      check to see if both cards match
      If yes, 
        Have some sort of effect to emphasize there is a match
        Increment overall count of flipped cards
        Increment click counter
    If counter = 3, 
      change image of cards currently flipped over (keys stored in array in this function) back to original image
      reset click counter
  */

  let clickCount = 0;

  let [visual, setVisual] = useState("back");

  const handleClick = ({ target }) => {
    console.log("hi!");
    clickCount++;
    console.log("Clickcount: ", clickCount);
    console.log(target);
    if (clickCount === 1) {
      console.log("hi");
      setVisual("front");
    }
  };

  //Generate an array of <Card /> components from shuffled array, giving each one an image icon and a clickHandler; done once at start of round
  //  individual cards re-render as clicked

  const cardArray = shuffledImages.map((image, i) => {
    return (
      <Card
        show={visual}
        icon={image.icon}
        alt={image.alt}
        key={i}
        onClick={handleClick}
      />
    );
  });

  //Data structure keeping track of which cards are matched; or maybe just a count? Needs to be checked at the beginning of each round
  //  Board either needs a structure holding the flipped/unflipped status of each card or a simple count of flipped ones; latter is simpler

  //Function to invoke when round is over; gives options to start a new round or not

  //Returns array of <Card /> elements with images
  return <div>{cardArray}</div>;
}

export default Board;
